---
- name: Installing dependencies
  ansible.builtin.apt:
    pkg: "{{ dotfiles.dependencies }}"
    update_cache: no

- name: Check if the dotfiles directory exists
  ansible.builtin.stat:
    path: "/home/{{ dotfiles.user.login }}/.dotfiles"
  register: dotfiles_dir

- name: Deleting .bashrc
  ansible.builtin.file:
    path: "/home/{{ dotfiles.user.login }}/.bashrc"
    state: absent
  when: dotfiles_dir.stat.isdir is defined and not dotfiles_dir.stat.isdir

- name: Deleting .bash_logout
  ansible.builtin.file:
    path: "/home/{{ dotfiles.user.login }}/.bash_logout"
    state: absent
  when: dotfiles_dir.stat.isdir is defined and not dotfiles_dir.stat.isdir

- name: Deleting .profile
  ansible.builtin.file:
    path: "/home/{{ dotfiles.user.login }}/.profile"
    state: absent
  become: yes
  become_user: "{{ dotfiles.user.login }}"
  when: dotfiles_dir.stat.isdir is defined and not dotfiles_dir.stat.isdir

- name: Generate SSH key
  ansible.builtin.user:
    name: "{{ dotfiles.user.login }}"
    shell: /usr/bin/zsh
    generate_ssh_key: yes
    ssh_key_type: ed25519
    ssh_key_file: .ssh/id_ed25519
    ssh_key_passphrase: ""
    force: no

- name: Add a host in the configuration
  community.general.ssh_config:
    user: "{{ dotfiles.user.email }}"
    host: "{{ dotfiles.repo.server }}"
    identity_file: "/home/{{ dotfiles.user.login }}/.ssh/id_ed25519"
    state: present

- name: Cloning dotfiles repo
  ansible.builtin.git:
    repo: "{{ dotfiles.repo.url }}"
    dest: "/home/{{ dotfiles.user.login }}/.dotfiles"
    clone: yes
    update: yes
  become: yes
  become_user: "{{ dotfiles.user.login }}"

- name: Installing configs
  ansible.builtin.command:
    cmd: "stow -R {{ item }}"
    chdir: "/home/{{ dotfiles.user.login }}/.dotfiles"
  with_items:
    "{{ dotfiles.configs }}"
  become: yes
  become_user: "{{ dotfiles.user.login }}"
...